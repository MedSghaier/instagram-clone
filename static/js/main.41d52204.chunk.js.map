{"version":3,"sources":["components/Title.js","firebase/config.js","firebase/credentials.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","hooks/useFirestore.js","components/ImageGrid.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","fireStorage","firestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snapshot","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","allowedTypes","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","console","log","ImageGrid","setSelectedImg","map","idx","layout","whileHover","opacity","key","onClick","img","transition","delay","src","alt","Modal","selectedImg","classList","contains","y","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.41d52204.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>Intsagram</h1>\n      <h2>My Pictures</h2>\n      <p>Photography is a way of feeling, of touching, of loving.</p>\n    </div>\n  )\n}\n\nexport default Title;","import * as firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\nimport firebaseConfigCreds from './credentials';\nvar firebaseConfig = firebaseConfigCreds;\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  const fireStorage = firebase.storage();\n  const firestore = firebase.firestore();\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\n  export { fireStorage, firestore, timestamp };","const firebaseConfigCreds = {\n    apiKey: \"AIzaSyDlfwXTiRYBxW4_zAVJh4UsCi0Ggkm53aA\",\n    authDomain: \"instag-replica.firebaseapp.com\",\n    databaseURL: \"https://instag-replica.firebaseio.com\",\n    projectId: \"instag-replica\",\n    storageBucket: \"instag-replica.appspot.com\",\n    messagingSenderId: \"1044011415630\",\n    appId: \"1:1044011415630:web:762cea561cfddc0b3f6b1f\"\n}\n\nexport default firebaseConfigCreds;","import { useState, useEffect } from 'react';\nimport {fireStorage, firestore, timestamp } from '../firebase/config';\n\nconst useStorage = (file) => {\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    useEffect(()=>{\n        // Refences\n        const storageRef = fireStorage.ref(file.name);\n        const collectionRef = firestore.collection('images');\n\n        storageRef.put(file).on('state_changed', (snapshot)=>{\n            let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            setProgress(percentage);\n        }, err => {\n            setError(err)\n        }, async ()=>{\n            const url = await storageRef.getDownloadURL();\n            const createdAt =  timestamp();\n            collectionRef.add({ url, createdAt })\n            setUrl(url) \n        })\n\n    }, [file]);\n\n    return { progress, error, url }\n}\n\nexport default useStorage;","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\nimport { motion } from 'framer-motion';\n\nconst ProgressBar = ({ file, setFile}) => {\n    const { url, progress } = useStorage(file);\n    useEffect(()=>{\n        if(url){\n            setFile(null);\n        }\n    },[url, setFile])\n    return (\n        <motion.div \n            initial={{ width:0 }}\n            animate={{ width: progress + '%' }}\n            className=\"progress-bar\" />\n    )   \n}\n\nexport default ProgressBar;","import React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\nconst UploadForm = () => {\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(null);\n\n    const allowedTypes = ['image/png','image/jpeg'];\n    const changeHandler = e =>{\n        let selected = e.target.files[0];\n\n        if (selected && allowedTypes.includes(selected.type)){\n            setFile(selected);\n            setError('');\n        } else {\n            setFile(null);\n            setError('Please selected a valid image type (png / jpg)');\n        }\n    }\n    return (\n        <form>\n            <label>\n                <input type=\"file\" name=\"image\" onChange={changeHandler}/>\n                <span>+</span>\n            </label>\n            <div className=\"output\">\n                {error && <div className=\"error\">{error}</div>}\n                {file && <div>{file.name}</div>}\n                {file && <ProgressBar file={file} setFile={setFile} />}\n            </div>\n        </form>\n    )\n}\nexport default UploadForm;","import { useState, useEffect } from 'react';\nimport { firestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n    const [docs, setDocs] = useState([]);\n    useEffect(()=>{\n        const unsub = firestore.collection(collection)\n            .orderBy('createdAt', 'desc')\n            .onSnapshot((snapshot)=>{\n                let documents = [];\n                snapshot.docs.forEach(doc => {\n                    documents.push({...doc.data(), id: doc.id})\n                });\n                console.log(documents);\n                setDocs(documents);\n            });\n        \n        return () => unsub();\n    },[collection]);\n    \n    return { docs };\n}\n\nexport default useFirestore;","import React from 'react';\nimport useFirestore  from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\n\nconst ImageGrid = ({setSelectedImg}) => {\n    const { docs } = useFirestore('images');\n    console.log(docs);\n    return (\n        <div className=\"img-grid\">\n            {docs && docs.map((doc,idx) => (\n                <motion.div \n                    layout\n                    whileHover={{ opacity:1 }}\n                    className=\"img-wrap\" \n                    key={doc.id} \n                    onClick={()=>setSelectedImg(doc.url)}>\n                        <motion.img \n                            initial={{opacity:0}}\n                            animate={{opacity:1}}\n                            transition={{delay:1}}\n                            src={doc.url} \n                            alt={`${idx}`}/>\n                </motion.div>\n            ))}\n        </div>\n    )\n}\n\nexport default ImageGrid;","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst Modal = ({selectedImg, setSelectedImg}) => {\n    const handleClosing = (e) => {\n        if (e.target.classList.contains('backdrop')){\n            setSelectedImg(null)\n        }\n    }\n    return (\n        <motion.div\n            initial={{opacity:0}}\n            animate={{ opacity:1 }}\n             className=\"backdrop\" \n             onClick={handleClosing}>\n            <motion.img\n                initial={{ y: \"-100vh\" }}\n                animate={{ y:0 }}\n                src={selectedImg} alt=\"full-sized\"/>\n        </motion.div>\n    )\n}\nexport default Modal","import React, {useState} from 'react';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null)\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg}/>\n      {selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg}/>}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}